Create React App (CRA) 建立專案。(原來是縮寫啊)
npx create-react-app my-app --template typescript

箭頭函式相比一般函式，重點在 1.更短更簡潔的寫法 2.與this變數的非綁定

// 這段函式會輸出[8, 6, 7, 9]這個陣列
elements.map(function (element) {
  return element.length;
});
// 上方這種一般的函式，可以被改寫成下方的箭頭函式
elements.map((element) => {
  return element.length;
}); // [8, 6, 7, 9]

這個 () 就是放輸入的參數，{} 就是一般放程式的地方！
就直接簡單的 () => {}，欸這寫法超明確的耶
只不過這些括號，可能前面的括號被省略，後面的括號被省略
又或是連 return 都省略 xd 主要是認那個箭頭

箭頭函式並不擁有自己的 this 變數；他是個過於簡單的結構
好處是，他被包在 func 時，你可以直接傳外面的 this 進去，不用額外去 bind，他會自己追溯
但壞處是，他不能儲存在某個變數上

當你看到花括號 {} 被用來定義資料時，通常是在創建一個「物件字面量」（object literal）。

React 有一組稱為 Hooks 的函數。 Hooks 讓你可以向元件添加額外的邏輯，例如 狀態。你可以將狀態視為 UI 中隨時間變化的任何訊息，通常由用戶互動觸發。React 有一組稱為 Hooks 的函數。 Hooks 讓你可以向元件添加額外的邏輯，例如 狀態。你可以將狀態視為 UI 中隨時間變化的任何訊息，通常由用戶互動觸發。

useState() 返回一個陣列，陣列中的第一項是狀態 值，陣列中的第二項是 更新 值的函數。
function HomePage() {
  const [likes, setLikes] = React.useState(0);
}

1. Front-end Framework（前端框架）
前端框架（例如 React、Vue、Angular）主要用於構建使用者介面。
它們提供了組件化的開發模式、狀態管理、資料綁定以及生命週期方法，幫助你建立互動性高、可維護的 UI。
 - 組件化：將 UI 拆分成獨立的組件，每個組件負責一部分的畫面與邏輯。
 - 狀態管理與互動：負責處理資料流、事件處理，通常也會與一些狀態管理工具（例如 Redux、Vuex）搭配使用。
 - 渲染：負責將資料轉換成瀏覽器可以呈現的 HTML，並在使用者操作時更新畫面。

2. Build Tools（構建工具）
構建工具（例如 Webpack、Vite、Rollup、Parcel）主要負責將原始程式碼轉換成瀏覽器能直接執行的資源。
它們處理模組化打包、程式碼轉譯、資源壓縮、熱重載（HMR）、代碼分割等工作。
編譯與轉譯：例如把 JSX 或 TypeScript 轉成瀏覽器可理解的 JavaScript。
打包與優化：將各個模組整合成一個或多個 bundle，同時進行壓縮、樹搖（tree-shaking）以提升效能。

3. Meta-frameworks（元框架／全功能框架）
Meta-frameworks 是建立在前端框架與構建工具之上的更高層級解決方案，例如 Next.js（基於 React）、Nuxt.js（基於 Vue）、Remix 或 Gatsby。
它們不僅提供 UI 層面的功能，還整合了路由、伺服器端渲染（SSR）、靜態網站生成（SSG）、API 路由、資料預抓取等功能，讓開發者能更快速地建立全功能的應用程式。
集成與預設配置：提供一整套約定大於配置的標準，使得專案結構與最佳實踐更明確。
伺服器端功能：除了前端渲染，還支援 SSR 或 SSG，改善 SEO 與首屏渲染速度。
開箱即用：通常內建許多常見功能（例如自動路由、API 路由），減少額外的配置與整合工作。
